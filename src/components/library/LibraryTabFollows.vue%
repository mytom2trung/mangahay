<template>
  <div class="h-full flex flex-col flex-nowrap">
    <q-tabs
      narrow-indicator
      no-caps
      active-class="text-sakura"
      v-model="loadType"
    >
      <q-tab
        v-for="{ name, value } in types"
        class="rounded-30px text-[rgba(255,255,255,0.86)] bg-[#fbe0ef] bg-opacity-8 text-weight-light font-family-poppins !min-h-32px mx-2"
        :key="value"
        :name="value"
        :label="name"
      />
    </q-tabs>
    <q-tab-panels
      v-model="loadType"
      animated
      swipeable
      infinite
      keep-alive
      class="transparent children:overflow-visible w-full h-full flex column children:flex-1 children:min-h-0 children:flex children:flex-col"
    >
      <q-tab-panel
        v-for="({ value }, index) in types"
        :key="value"
        :name="value"
        class="px-0 flex flex-col min-h-0"
      >
        <q-card class="transparent min-h-0 shadow-none overflow-y-auto">
          <q-card-section>
            <CardVerticalSKT
              v-if="!datas.get(value)"
              v-for="j in 12"
              :key="j"
              class="mb-4"
            />
            <div v-else-if="isSuccess(datas.get(value)!)">
              <q-infinite-scroll @load="onLoads[index]" :offset="250">
                <CardVertical
                  v-for="item in (datas.get(value) as DataSuccess)!.data.items"
                  :key="item.path"
                  :data="item"
                  read-continue
                  class="mb-4"
                />
                <template #loading>
                  <div class="col-12 justify-center flex q-my-md">
                    <q-spinner-dots color="main-3" size="40px" />
                  </div>
                </template>
              </q-infinite-scroll>
            </div>
            <div v-else class="text-center">
              <div class="text-subtitle1 font-weight-medium">
                Lỗi không xác định
              </div>
              <q-btn outline rounded color="sakura" @click="refresh(value)"
                >Thử lại</q-btn
              >
            </div>
          </q-card-section>
        </q-card>
      </q-tab-panel>
    </q-tab-panels>
  </div>
</template>

<script lang="ts" setup>
import { QCard } from "quasar"
import TheoDoi from "src/apis/nettruyen/runs/theo-doi"

const authStore = useAuthStore()

const types = [
  { name: "Mới cập nhật", value: "0" },
  { name: "Chưa đọc", value: "3" },
] as const
// ========= state data ========
const loadType = ref<"0" | "3">("0")

interface DataSuccess {
  data: Awaited<ReturnType<typeof TheoDoi>>
}
interface DataError {
  err: unknown
}

const datas = shallowReactive<Map<string, DataSuccess | DataError>>(new Map())
const onLoads = types.map(({ value }) => {
  return useLoadMorePage(
    async (page) => {
      // eslint-disable-next-line functional/no-throw-statement
      if (!authStore.user_data) throw new Error("need_login")

      return await TheoDoi(
        page,
        authStore.user_data.userGuid,
        authStore.user_data.token,
        value,
      )
    },
    computed(() => (datas.get(value) as DataSuccess)?.data),
  )
})
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isSuccess = (val: any): val is DataSuccess => {
  return "data" in val
}
watch(
  loadType,
  async (type) => {
    if (datas.has(type)) return

    await refresh(type)
  },
  { immediate: true },
)
async function refresh(type: string) {
  datas.delete(type)
  try {
    // eslint-disable-next-line functional/no-throw-statement
    if (!authStore.user_data) throw new Error("need_login")

    const data = await TheoDoi(
      1,
      authStore.user_data.userGuid,
      authStore.user_data.token,
      type,
    )
    data.items = shallowReactive(data.items)
    datas.set(type, {
      data,
    })
  } catch (err) {
    datas.set(type, { err })
  }
}
</script>
